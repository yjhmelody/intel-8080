use std::convert::From;
use std::convert::Into;
use std::default::Default;

#[allow(non_camel_case_types)]
#[derive(Debug, Ord, PartialOrd, Eq, PartialEq, Copy, Clone)]
pub enum Opcode {
    NOP = 0x00,
    LXI_B = 0x01,
    STAX_B = 0x02,
    INX_B = 0x03,
    INR_B = 0x04,
    DCR_B = 0x05,
    MVI_B = 0x06,
    RLC = 0x07,
    // NOP = 0x08,
    DAD_B = 0x09,
    LDAX_B = 0x0A,
    DCX_B = 0x0B,
    INR_C = 0x0C,
    DCR_C = 0x0D,
    MVI_C = 0x0E,
    RRC = 0x0F,
    // NOP = 0x10,
    LXI_D = 0x11,
    STAX_D = 0x12,
    INX_D = 0x13,
    INR_D = 0x14,
    DCR_D = 0x15,
    MVI_D = 0x16,
    RAL = 0x17,
    // NOP = 0x18,
    DAD_D = 0x19,
    LDAX_D = 0x1A,
    DCX_D = 0x1B,
    INR_E = 0x1C,
    DCR_E = 0x1D,
    MVI_E = 0x1E,
    RAR = 0x1F,
    // NOP = 0x20,
    LXI_H = 0x21,
    SHLD = 0x22,
    INX_H = 0x23,
    INR_H = 0x24,
    DCR_H = 0x25,
    MVI_H = 0x26,
    DAA = 0x27,
    // NOP = 0x28,
    DAD_H = 0x29,
    LHLD = 0x2A,
    DCX_H = 0x2B,
    INR_L = 0x2C,
    DCR_L = 0x2D,
    MVI_L = 0x2E,
    CMA = 0x2F,
    // NOP = 0x30,
    LXI_SP = 0x31,
    STA = 0x32,
    INX_SP = 0x33,
    INR_M = 0x34,
    DCR_M = 0x35,
    MVI_M = 0x36,
    STC = 0x37,
    // NOP = 0x38,
    DAD_SP = 0x39,
    LDA = 0x3A,
    DCX_SP = 0x3B,
    INR_A = 0x3C,
    DCR_A = 0x3D,
    MVI_A = 0x3E,
    CMC = 0x3F,

    MOV_BB = 0x40,
    MOV_BC = 0x41,
    MOV_BD = 0x42,
    MOV_BE = 0x43,
    MOV_BH = 0x44,
    MOV_BL = 0x45,
    MOV_BM = 0x46,
    MOV_BA = 0x47,
    MOV_CB = 0x48,
    MOV_CC = 0x49,
    MOV_CD = 0x4A,
    MOV_CE = 0x4B,
    MOV_CH = 0x4C,
    MOV_CL = 0x4D,
    MOV_CM = 0x4E,
    MOV_CA = 0x4F,

    MOV_DB = 0x50,
    MOV_DC = 0x51,
    MOV_DD = 0x52,
    MOV_DE = 0x53,
    MOV_DH = 0x54,
    MOV_DL = 0x55,
    MOV_DM = 0x56,
    MOV_DA = 0x57,

    MOV_EB = 0x58,
    MOV_EC = 0x59,
    MOV_ED = 0x5A,
    MOV_EE = 0x5B,
    MOV_EH = 0x5C,
    MOV_EL = 0x5D,
    MOV_EM = 0x5E,
    MOV_EA = 0x5F,

    MOV_HB = 0x60,
    MOV_HC = 0x61,
    MOV_HD = 0x62,
    MOV_HE = 0x63,
    MOV_HH = 0x64,
    MOV_HL = 0x65,
    MOV_HM = 0x66,
    MOV_HA = 0x67,

    MOV_LB = 0x68,
    MOV_LC = 0x69,
    MOV_LD = 0x6A,
    MOV_LE = 0x6B,
    MOV_LH = 0x6C,
    MOV_LL = 0x6D,
    MOV_LM = 0x6E,
    MOV_LA = 0x6F,

    MOV_MB = 0x70,
    MOV_MC = 0x71,
    MOV_MD = 0x72,
    MOV_ME = 0x73,
    MOV_MH = 0x74,
    MOV_ML = 0x75,

    HLT = 0x76,

    MOV_MA = 0x77,
    MOV_AB = 0x78,
    MOV_AC = 0x79,
    MOV_AD = 0x7A,
    MOV_AE = 0x7B,
    MOV_AH = 0x7C,
    MOV_AL = 0x7D,
    MOV_AM = 0x7E,
    MOV_AA = 0x7F,

    ADD_B = 0x80,
    ADD_C = 0x81,
    ADD_D = 0x82,
    ADD_E = 0x83,
    ADD_H = 0x84,
    ADD_L = 0x85,
    ADD_M = 0x86,
    ADD_A = 0x87,

    ADC_B = 0x88,
    ADC_C = 0x89,
    ADC_D = 0x8A,
    ADC_E = 0x8B,
    ADC_H = 0x8C,
    ADC_L = 0x8D,
    ADC_M = 0x8E,
    ADC_A = 0x8F,

    SUB_B = 0x90,
    SUB_C = 0x91,
    SUB_D = 0x92,
    SUB_E = 0x93,
    SUB_H = 0x94,
    SUB_L = 0x95,
    SUB_M = 0x96,
    SUB_A = 0x97,

    SBB_B = 0x98,
    SBB_C = 0x99,
    SBB_D = 0x9A,
    SBB_E = 0x9B,
    SBB_H = 0x9C,
    SBB_L = 0x9D,
    SBB_M = 0x9E,
    SBB_A = 0x9F,

    ANA_B = 0xA0,
    ANA_C = 0xA1,
    ANA_D = 0xA2,
    ANA_E = 0xA3,
    ANA_H = 0xA4,
    ANA_L = 0xA5,
    ANA_M = 0xA6,
    ANA_A = 0xA7,

    XRA_B = 0xA8,
    XRA_C = 0xA9,
    XRA_D = 0xAA,
    XRA_E = 0xAB,
    XRA_H = 0xAC,
    XRA_L = 0xAD,
    XRA_M = 0xAE,
    XRA_A = 0xAF,

    ORA_B = 0xB0,
    ORA_C = 0xB1,
    ORA_D = 0xB2,
    ORA_E = 0xB3,
    ORA_H = 0xB4,
    ORA_L = 0xB5,
    ORA_M = 0xB6,
    ORA_A = 0xB7,

    CMP_B = 0xB8,
    CMP_C = 0xB9,
    CMP_D = 0xBA,
    CMP_E = 0xBB,
    CMP_H = 0xBC,
    CMP_L = 0xBD,
    CMP_M = 0xBE,
    CMP_A = 0xBF,

    RNZ = 0xC0,
    POP_B = 0xC1,
    JNZ = 0xC2,
    JMP = 0xC3,
    CNZ = 0xC4,
    PUSH_B = 0xC5,
    ADI = 0xC6,
    RST_0 = 0xC7,
    RZ = 0xC8,
    RET = 0xC9,
    JZ = 0xCA,
    //JMP = 0xCB,
    CZ = 0xCC,
    CALL = 0xCD,
    ACI = 0xCE,
    RST_1 = 0xCF,
    RNC = 0xD0,
    POP_D = 0xD1,
    JNC = 0xD2,
    OUT = 0xD3,
    CNC = 0xD4,
    PUSH_D = 0xD5,
    SUI = 0xD6,
    RST_2 = 0xD7,
    RC = 0xD8,
    // RET = 0xD9,
    JC = 0xDA,
    IN = 0xDB,
    CC = 0xDC,
    // CALL = 0xDD,
    SBI = 0xDE,
    RST_3 = 0xDF,
    RPO = 0xE0,
    POP_H = 0xE1,
    JPO = 0xE2,
    XTHL = 0xE3,
    CPO = 0xE4,
    PUSH_H = 0xE5,
    ANI = 0xE6,
    RST_4 = 0xE7,
    RPE = 0xE8,
    PCHL = 0xE9,
    JPE = 0xEA,
    XCHG = 0xEB,
    CPE = 0xEC,
    // CALL = 0xED,
    XRI = 0xEE,
    RST_5 = 0xEF,
    RP = 0xF0,
    POP_PSW = 0xF1,
    JP = 0xF2,
    DI = 0xF3,
    CP = 0xF4,
    PUSH_PSW = 0xF5,
    ORI = 0xF6,
    RST_6 = 0xF7,
    RM = 0xF8,
    SPHL = 0xF9,
    JM = 0xFA,
    EI = 0xFB,
    CM = 0xFC,
    // CALL = 0xFD,
    CPI = 0xFE,
    RST_7 = 0xFF,
}

impl Opcode {
    #[inline]
    pub fn get_dest_num(self) -> u8 {
        (self as u8 & 0b0011_1000) >> 3
    }

    #[inline]
    pub fn get_src_num(self) -> u8 {
        (self as u8 & 0b0000_0111)
    }

    #[inline]
    pub fn get_rp_num(self) -> u8 {
        (self as u8 & 0b0001_0000) >> 4
    }

    #[inline]
    pub fn get_rp_num_2(self) -> u8 {
        (self as u8 & 0b0011_0000) >> 4
    }
}

impl Default for Opcode {
    fn default() -> Self {
        Opcode::NOP
    }
}

impl Into<u8> for Opcode {
    fn into(self) -> u8 {
        self as u8
    }
}

impl Into<usize> for Opcode {
    fn into(self) -> usize {
        self as usize
    }
}

impl From<u8> for Opcode {
    fn from(n: u8) -> Self {
        use Opcode::*;
        match n {
            0x00 | 0x10 | 0x20 | 0x30 | 0x08 | 0x18 | 0x28 | 0x38 => NOP,
            0x01 => LXI_B,
            0x02 => STAX_B,
            0x03 => INX_B,
            0x04 => INR_B,
            0x05 => DCR_B,
            0x06 => MVI_B,
            0x07 => RLC,

            0x09 => DAD_B,
            0x0A => LDAX_B,
            0x0B => DCX_B,
            0x0C => INR_C,
            0x0D => DCR_C,
            0x0E => MVI_C,
            0x0F => RRC,

            0x11 => LXI_D,
            0x12 => STAX_D,
            0x13 => INX_D,
            0x14 => INR_D,
            0x15 => DCR_D,
            0x16 => MVI_D,
            0x17 => RAL,

            0x19 => DAD_D,
            0x1A => LDAX_D,
            0x1B => DCX_D,
            0x1C => INR_E,
            0x1D => DCR_E,
            0x1E => MVI_E,
            0x1F => RAR,

            0x21 => LXI_H,
            0x22 => SHLD,
            0x23 => INX_H,
            0x24 => INR_H,
            0x25 => DCR_H,
            0x26 => MVI_H,
            0x27 => DAA,

            0x29 => DAD_H,
            0x2A => LHLD,
            0x2B => DCX_H,
            0x2C => INR_L,
            0x2D => DCR_L,
            0x2E => MVI_L,
            0x2F => CMA,

            0x31 => LXI_SP,
            0x32 => STA,
            0x33 => INX_SP,
            0x34 => INR_M,
            0x35 => DCR_M,
            0x36 => MVI_M,
            0x37 => STC,

            0x39 => DAD_SP,
            0x3A => LDA,
            0x3B => DCX_SP,
            0x3C => INR_A,
            0x3D => DCR_A,
            0x3E => MVI_A,
            0x3F => CMC,

            0x40 => MOV_BB,
            0x41 => MOV_BC,
            0x42 => MOV_BD,
            0x43 => MOV_BE,
            0x44 => MOV_BH,
            0x45 => MOV_BL,
            0x46 => MOV_BM,
            0x47 => MOV_BA,

            0x48 => MOV_CB,
            0x49 => MOV_CC,
            0x4A => MOV_CD,
            0x4B => MOV_CE,
            0x4C => MOV_CH,
            0x4D => MOV_CL,
            0x4E => MOV_CM,
            0x4F => MOV_CA,

            0x50 => MOV_DB,
            0x51 => MOV_DC,
            0x52 => MOV_DD,
            0x53 => MOV_DE,
            0x54 => MOV_DH,
            0x55 => MOV_DL,
            0x56 => MOV_DM,
            0x57 => MOV_DA,

            0x58 => MOV_EB,
            0x59 => MOV_EC,
            0x5A => MOV_ED,
            0x5B => MOV_EE,
            0x5C => MOV_EH,
            0x5D => MOV_EL,
            0x5E => MOV_EM,
            0x5F => MOV_EA,

            0x60 => MOV_HB,
            0x61 => MOV_HC,
            0x62 => MOV_HD,
            0x63 => MOV_HE,
            0x64 => MOV_HH,
            0x65 => MOV_HL,
            0x66 => MOV_HM,
            0x67 => MOV_HA,

            0x68 => MOV_LB,
            0x69 => MOV_LC,
            0x6A => MOV_LD,
            0x6B => MOV_LE,
            0x6C => MOV_LH,
            0x6D => MOV_LL,
            0x6E => MOV_LM,
            0x6F => MOV_LA,

            0x70 => MOV_MB,
            0x71 => MOV_MC,
            0x72 => MOV_MD,
            0x73 => MOV_ME,
            0x74 => MOV_MH,
            0x75 => MOV_ML,

            0x76 => HLT,

            0x77 => MOV_MA,
            0x78 => MOV_AB,
            0x79 => MOV_AC,
            0x7A => MOV_AD,
            0x7B => MOV_AE,
            0x7C => MOV_AH,
            0x7D => MOV_AL,
            0x7E => MOV_AM,
            0x7F => MOV_AA,

            0x80 => ADD_B,
            0x81 => ADD_C,
            0x82 => ADD_D,
            0x83 => ADD_E,
            0x84 => ADD_H,
            0x85 => ADD_L,
            0x86 => ADD_M,
            0x87 => ADD_A,

            0x88 => ADC_B,
            0x89 => ADC_C,
            0x8A => ADC_D,
            0x8B => ADC_E,
            0x8C => ADC_H,
            0x8D => ADC_L,
            0x8E => ADC_M,
            0x8F => ADC_A,

            0x90 => SUB_B,
            0x91 => SUB_C,
            0x92 => SUB_D,
            0x93 => SUB_E,
            0x94 => SUB_H,
            0x95 => SUB_L,
            0x96 => SUB_M,
            0x97 => SUB_A,

            0x98 => SBB_B,
            0x99 => SBB_C,
            0x9A => SBB_D,
            0x9B => SBB_E,
            0x9C => SBB_H,
            0x9D => SBB_L,
            0x9E => SBB_M,
            0x9F => SBB_A,

            0xA0 => ANA_B,
            0xA1 => ANA_C,
            0xA2 => ANA_D,
            0xA3 => ANA_E,
            0xA4 => ANA_H,
            0xA5 => ANA_L,
            0xA6 => ANA_M,
            0xA7 => ANA_A,

            0xA8 => XRA_B,
            0xA9 => XRA_C,
            0xAA => XRA_D,
            0xAB => XRA_E,
            0xAC => XRA_H,
            0xAD => XRA_L,
            0xAE => XRA_M,
            0xAF => XRA_A,

            0xB0 => ORA_B,
            0xB1 => ORA_C,
            0xB2 => ORA_D,
            0xB3 => ORA_E,
            0xB4 => ORA_H,
            0xB5 => ORA_L,
            0xB6 => ORA_M,
            0xB7 => ORA_A,

            0xB8 => CMP_B,
            0xB9 => CMP_C,
            0xBA => CMP_D,
            0xBB => CMP_E,
            0xBC => CMP_H,
            0xBD => CMP_L,
            0xBE => CMP_M,
            0xBF => CMP_A,

            0xC0 => RNZ,
            0xC1 => POP_B,
            0xC2 => JNZ,
            0xC3 | 0xCB => JMP,
            0xC4 => CNZ,
            0xC5 => PUSH_B,
            0xC6 => ADI,
            0xC7 => RST_0,
            0xC8 => RZ,
            0xC9 | 0xD9 => RET,
            0xCA => JZ,

            0xCC => CZ,
            0xCD | 0xDD | 0xED | 0xFD => CALL,
            0xCE => ACI,
            0xCF => RST_1,
            0xD0 => RNC,
            0xD1 => POP_D,
            0xD2 => JNC,
            0xD3 => OUT,
            0xD4 => CNC,
            0xD5 => PUSH_D,
            0xD6 => SUI,
            0xD7 => RST_2,
            0xD8 => RC,

            0xDA => JC,
            0xDB => IN,
            0xDC => CC,
            0xDE => SBI,
            0xDF => RST_3,
            0xE0 => RPO,
            0xE1 => POP_H,
            0xE2 => JPO,
            0xE3 => XTHL,
            0xE4 => CPO,
            0xE5 => PUSH_H,
            0xE6 => ANI,
            0xE7 => RST_4,
            0xE8 => RPE,
            0xE9 => PCHL,
            0xEA => JPE,
            0xEB => XCHG,
            0xEC => CPE,
            0xEE => XRI,
            0xEF => RST_5,
            0xF0 => RP,
            0xF1 => POP_PSW,
            0xF2 => JP,
            0xF3 => DI,
            0xF4 => CP,
            0xF5 => PUSH_PSW,
            0xF6 => ORI,
            0xF7 => RST_6,
            0xF8 => RM,
            0xF9 => SPHL,
            0xFA => JM,
            0xFB => EI,
            0xFC => CM,
            0xFE => CPI,
            0xFF => RST_7,
        }
    }
}
